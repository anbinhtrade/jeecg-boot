package ${bussiPackage}.${entityPackage}.controller;

import org.jeecg.common.system.query.QueryGenerator;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.extern.slf4j.Slf4j;
import org.jeecg.common.system.base.controller.JeecgController;
import org.jeecg.common.api.vo.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.web.servlet.ModelAndView;
import java.util.Arrays;
import org.jeecg.common.util.oConvertUtils;
<#list subTables as sub>
import ${bussiPackage}.${entityPackage}.entity.${sub.entityName};
</#list>
import ${bussiPackage}.${entityPackage}.entity.${entityName};
import ${bussiPackage}.${entityPackage}.service.I${entityName}Service;
<#list subTables as sub>
import ${bussiPackage}.${entityPackage}.service.I${sub.entityName}Service;
</#list>
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.jeecg.common.aspect.annotation.AutoLog;
import org.apache.shiro.SecurityUtils;
import org.jeecg.common.system.vo.LoginUser;
import org.jeecgframework.poi.excel.ExcelImportUtil;
import org.jeecgframework.poi.excel.def.NormalExcelConstants;
import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.ImportParams;
import org.jeecgframework.poi.excel.view.JeecgEntityExcelView;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.apache.shiro.authz.annotation.RequiresPermissions;

 /**
 * @Description: ${tableVo.ftlDescription}
 * @Author: jeecg-boot
 * @Date:   ${.now?string["yyyy-MM-dd"]}
 * @Version: V1.0
 */
@Api(tags="${tableVo.ftlDescription}")
@RestController
@RequestMapping("/${entityPackage}/${entityName?uncap_first}")
@Slf4j
public class ${entityName}Controller extends JeecgController<${entityName}, I${entityName}Service> {

	@Autowired
	private I${entityName}Service ${entityName?uncap_first}Service;
	<#list subTables as sub>

	@Autowired
	private I${sub.entityName}Service ${sub.entityName?uncap_first}Service;
	</#list>


	/*---------------------------------Main table processing-begin-------------------------------------*/

	/**
	 * Paging list query
	 * @param ${entityName?uncap_first}
	 * @param pageNo
	 * @param pageSize
	 * @param req
	 * @return
	 */
	//@AutoLog(value = "${tableVo.ftlDescription}-Paging list query")
	@ApiOperation(value="${tableVo.ftlDescription}-Paging list query", notes="${tableVo.ftlDescription}-Paging list query")
	@GetMapping(value = "/list")
	public Result<IPage<${entityName}>> queryPageList(${entityName} ${entityName?uncap_first},
								   @RequestParam(name="pageNo", defaultValue="1") Integer pageNo,
								   @RequestParam(name="pageSize", defaultValue="10") Integer pageSize,
								   HttpServletRequest req) {
		QueryWrapper<${entityName}> queryWrapper = QueryGenerator.initQueryWrapper(${entityName?uncap_first}, req.getParameterMap());
		Page<${entityName}> page = new Page<${entityName}>(pageNo, pageSize);
		IPage<${entityName}> pageList = ${entityName?uncap_first}Service.page(page, queryWrapper);
		return Result.OK(pageList);
	}

	/**
     *   Add
     * @param ${entityName?uncap_first}
     * @return
     */
    @AutoLog(value = "${tableVo.ftlDescription}-Add")
    @ApiOperation(value="${tableVo.ftlDescription}-Add", notes="${tableVo.ftlDescription}-Add")
    @RequiresPermissions("${entityPackage}:${tableName}:add")
    @PostMapping(value = "/add")
    public Result<String> add(@RequestBody ${entityName} ${entityName?uncap_first}) {
        ${entityName?uncap_first}Service.save(${entityName?uncap_first});
        return Result.OK("Successfully Added！");
    }

    /**
     *  Edit
     * @param ${entityName?uncap_first}
     * @return
     */
    @AutoLog(value = "${tableVo.ftlDescription}-Edit")
    @ApiOperation(value="${tableVo.ftlDescription}-Edit", notes="${tableVo.ftlDescription}-Edit")
    @RequiresPermissions("${entityPackage}:${tableName}:edit")
    @RequestMapping(value = "/edit", method = {RequestMethod.PUT,RequestMethod.POST})
    public Result<String> edit(@RequestBody ${entityName} ${entityName?uncap_first}) {
        ${entityName?uncap_first}Service.updateById(${entityName?uncap_first});
        return Result.OK("Successfully Edited!");
    }

    /**
     * Delete by id
     * @param id
     * @return
     */
    @AutoLog(value = "${tableVo.ftlDescription}-Delete by id")
    @ApiOperation(value="${tableVo.ftlDescription}-Delete by id", notes="${tableVo.ftlDescription}-Delete by id")
    @RequiresPermissions("${entityPackage}:${tableName}:delete")
    @DeleteMapping(value = "/delete")
    public Result<String> delete(@RequestParam(name="id",required=true) String id) {
        ${entityName?uncap_first}Service.delMain(id);
        return Result.OK("Successfully Deleted!");
    }

    /**
     * Batch Delete
     * @param ids
     * @return
     */
    @AutoLog(value = "${tableVo.ftlDescription}-Batch Delete")
    @ApiOperation(value="${tableVo.ftlDescription}-Batch Delete", notes="${tableVo.ftlDescription}-Batch Delete")
    @RequiresPermissions("${entityPackage}:${tableName}:deleteBatch")
    @DeleteMapping(value = "/deleteBatch")
    public Result<String> deleteBatch(@RequestParam(name="ids",required=true) String ids) {
        this.${entityName?uncap_first}Service.delBatchMain(Arrays.asList(ids.split(",")));
        return Result.OK("Successfully Batch Deleted!");
    }

    /**
     * Export
     * @return
     */
    @RequiresPermissions("${entityPackage}:${tableName}:exportXls")
    @RequestMapping(value = "/exportXls")
    public ModelAndView exportXls(HttpServletRequest request, ${entityName} ${entityName?uncap_first}) {
        return super.exportXls(request, ${entityName?uncap_first}, ${entityName}.class, "${tableVo.ftlDescription}");
    }

    /**
     * Import
     * @return
     */
    @RequiresPermissions("${entityPackage}:${tableName}:importExcel")
    @RequestMapping(value = "/importExcel", method = RequestMethod.POST)
    public Result<?> importExcel(HttpServletRequest request, HttpServletResponse response) {
        return super.importExcel(request, response, ${entityName}.class);
    }
	/*---------------------------------Main table processing-end-------------------------------------*/
	
	<#list subTables as sub>

    /*--------------------------------Subtable processing-${sub.ftlDescription}-begin----------------------------------------------*/
	/**
	 * Query by main table ID
	 * @return
	 */
	//@AutoLog(value = "${sub.ftlDescription}-Query by main table ID")
	@ApiOperation(value="${sub.ftlDescription}-Query by main table ID", notes="${sub.ftlDescription}-Query by main table ID")
	@GetMapping(value = "/list${sub.entityName}ByMainId")
    public Result<IPage<${sub.entityName}>> list${sub.entityName}ByMainId(${sub.entityName} ${sub.entityName?uncap_first},
                                                    @RequestParam(name = "pageNo", defaultValue = "1") Integer pageNo,
                                                    @RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize,
                                                    HttpServletRequest req) {
        QueryWrapper<${sub.entityName}> queryWrapper = QueryGenerator.initQueryWrapper(${sub.entityName?uncap_first}, req.getParameterMap());
        Page<${sub.entityName}> page = new Page<${sub.entityName}>(pageNo, pageSize);
        IPage<${sub.entityName}> pageList = ${sub.entityName?uncap_first}Service.page(page, queryWrapper);
        return Result.OK(pageList);
    }

	/**
	 * Add
	 * @param ${sub.entityName?uncap_first}
	 * @return
	 */
	@AutoLog(value = "${sub.ftlDescription}-Add")
	@ApiOperation(value="${sub.ftlDescription}-Add", notes="${sub.ftlDescription}-Add")
	@PostMapping(value = "/add${sub.entityName}")
	public Result<String> add${sub.entityName}(@RequestBody ${sub.entityName} ${sub.entityName?uncap_first}) {
		${sub.entityName?uncap_first}Service.save(${sub.entityName?uncap_first});
		return Result.OK("Successfully Added！");
	}

    /**
	 * Edit
	 * @param ${sub.entityName?uncap_first}
	 * @return
	 */
	@AutoLog(value = "${sub.ftlDescription}-Edit")
	@ApiOperation(value="${sub.ftlDescription}-Edit", notes="${sub.ftlDescription}-Edit")
	@RequestMapping(value = "/edit${sub.entityName}", method = {RequestMethod.PUT,RequestMethod.POST})
	public Result<String> edit${sub.entityName}(@RequestBody ${sub.entityName} ${sub.entityName?uncap_first}) {
		${sub.entityName?uncap_first}Service.updateById(${sub.entityName?uncap_first});
		return Result.OK("Successfully Edited!");
	}

	/**
	 * Delete by id
	 * @param id
	 * @return
	 */
	@AutoLog(value = "${sub.ftlDescription}-Delete by id")
	@ApiOperation(value="${sub.ftlDescription}-Delete by id", notes="${sub.ftlDescription}-Delete by id")
	@DeleteMapping(value = "/delete${sub.entityName}")
	public Result<String> delete${sub.entityName}(@RequestParam(name="id",required=true) String id) {
		${sub.entityName?uncap_first}Service.removeById(id);
		return Result.OK("Successfully Deleted!");
	}

	/**
	 * Batch Delete
	 * @param ids
	 * @return
	 */
	@AutoLog(value = "${sub.ftlDescription}-Batch Delete")
	@ApiOperation(value="${sub.ftlDescription}-Batch Delete", notes="${sub.ftlDescription}-Batch Delete")
	@DeleteMapping(value = "/deleteBatch${sub.entityName}")
	public Result<String> deleteBatch${sub.entityName}(@RequestParam(name="ids",required=true) String ids) {
	    this.${sub.entityName?uncap_first}Service.removeByIds(Arrays.asList(ids.split(",")));
		return Result.OK("Successfully Batch Deleted!");
	}

    /**
     * Export
     * @return
     */
    @RequestMapping(value = "/export${sub.entityName}")
    public ModelAndView export${sub.entityName}(HttpServletRequest request, ${sub.entityName} ${sub.entityName?uncap_first}) {
		 // Step.1 Assemble query conditions
		 QueryWrapper<${sub.entityName}> queryWrapper = QueryGenerator.initQueryWrapper(${sub.entityName?uncap_first}, request.getParameterMap());
		 LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();

		 // Step.2 Get export data
		 List<${sub.entityName}> pageList = ${sub.entityName?uncap_first}Service.list(queryWrapper);
		 List<${sub.entityName}> exportList = null;

		 // Filter selected data
		 String selections = request.getParameter("selections");
		 if (oConvertUtils.isNotEmpty(selections)) {
			 List<String> selectionList = Arrays.asList(selections.split(","));
			 exportList = pageList.stream().filter(item -> selectionList.contains(item.getId())).collect(Collectors.toList());
		 } else {
			 exportList = pageList;
		 }

		 // Step.3 AutoPoi ExportExcel
		 ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
		 //The filename set here is invalid, the front end will be updated and set again.
		 mv.addObject(NormalExcelConstants.FILE_NAME, "${sub.ftlDescription}");
		 mv.addObject(NormalExcelConstants.CLASS, ${sub.entityName}.class);
		 mv.addObject(NormalExcelConstants.PARAMS, new ExportParams("${sub.ftlDescription}Report", "Exporter:" + sysUser.getRealname(), "${sub.ftlDescription}"));
		 mv.addObject(NormalExcelConstants.DATA_LIST, exportList);
		 return mv;
    }

    /**
     * Import
     * @return
     */
    @RequestMapping(value = "/import${sub.entityName}/{mainId}")
    public Result<?> import${sub.entityName}(HttpServletRequest request, HttpServletResponse response, @PathVariable("mainId") String mainId) {
		 MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		 Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();
		 for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) {
       // Get the uploaded file object
			 MultipartFile file = entity.getValue();
			 ImportParams params = new ImportParams();
			 params.setTitleRows(2);
			 params.setHeadRows(1);
			 params.setNeedSave(true);
			 try {
				 List<${sub.entityName}> list = ExcelImportUtil.importExcel(file.getInputStream(), ${sub.entityName}.class, params);
				 for (${sub.entityName} temp : list) {
					<#list sub.foreignKeys as key>
                    temp.set${key?cap_first}(mainId);
                    </#list>
				 }
				 long start = System.currentTimeMillis();
				 ${sub.entityName?uncap_first}Service.saveBatch(list);
				 log.info("Time consumed" + (System.currentTimeMillis() - start) + "Milliseconds");
				 return Result.OK("File import successful! Number of data rows:" + list.size());
			 } catch (Exception e) {
				 log.error(e.getMessage(), e);
				 return Result.error("File import failed: " + e.getMessage());
			 } finally {
				 try {
					 file.getInputStream().close();
				 } catch (IOException e) {
					 e.printStackTrace();
				 }
			 }
		 }
		 return Result.error("File import failed！");
    }

    /*--------------------------------Subtable processing-${sub.ftlDescription}-end----------------------------------------------*/
	</#list>




}
