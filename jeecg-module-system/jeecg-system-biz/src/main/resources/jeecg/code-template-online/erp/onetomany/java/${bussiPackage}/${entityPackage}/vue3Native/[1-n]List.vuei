<#list subTables as sub>
#segment#${sub.entityName}List.vue
<template>
 <div class="p-2">
   <#-- end loop -->
    <!--Reference table-->
    <BasicTable @register="registerTable" :rowSelection="rowSelection">
      <!--Slot: table title-->
      <template #tableTitle>
        <a-button type="primary" @click="handleAdd" preIcon="ant-design:plus-outlined"> New</a-button>
        <a-button  type="primary" preIcon="ant-design:export-outlined" @click="onExportXls"> Export</a-button>
        <j-upload-button  type="primary" preIcon="ant-design:import-outlined" @click="onImportXls">Import</j-upload-button>
        <a-dropdown v-if="selectedRowKeys.length > 0">
          <template #overlay>
            <a-menu>
              <a-menu-item key="1" @click="batchHandleDelete">
                <Icon icon="ant-design:delete-outlined"></Icon>
                Delete
              </a-menu-item>
            </a-menu>
          </template>
          <a-button>Delete
            <Icon icon="mdi:chevron-down"></Icon>
          </a-button>
        </a-dropdown>
      </template>
      <!--Action bar-->
      <template #action="{ record }">
        <TableAction :actions="getTableAction(record)" :dropDownActions="getDropDownAction(record)"/>
      </template>
      <!--Field echo slot-->
      <template v-slot:bodyCell="{ column, record, index, text }">
       <#list sub.originalColumns as po>
        <#if po.classType=='umeditor' || po.classType=='pca' || po.classType=='file'>
        <template v-if="column.dataIndex==='${po.fieldName}'">
         <#if po.classType=='umeditor'>
          <!--Rich text file field echo slot-->
          <div v-html="text"></div>
         </#if>
         <#if po.classType=='file'>
          <!--File field echo slot-->
          <span v-if="!text" style="font-size: 12px;font-style: italic;">No file</span>
          <a-button v-else :ghost="true" type="primary" preIcon="ant-design:download-outlined" size="small" @click="downloadFile(text)">Download</a-button>
         </#if>
        </template>
        </#if>
       </#list>
      </template>
    </BasicTable>

    <${sub.entityName}Modal ref="registerModal" @success="handleSuccess"/>
   </div>
</template>

<script lang="ts" setup>
  import { ref, reactive, unref, inject, watch } from 'vue';
  import { BasicTable, useTable, TableAction } from '/@/components/Table';
  import { useListPage } from '/@/hooks/system/useListPage'
  import ${sub.entityName}Modal from './components/${sub.entityName}Modal.vue'
  import { ${sub.entityName?uncap_first}Columns } from './${entityName}.data';
  import { ${sub.entityName?uncap_first}List, ${sub.entityName?uncap_first}Delete, ${sub.entityName?uncap_first}DeleteBatch, ${sub.entityName?uncap_first}ExportXlsUrl, ${sub.entityName?uncap_first}ImportUrl } from './${entityName}.api';
  import { isEmpty } from "/@/utils/is";
  import { useMessage } from '/@/hooks/web/useMessage';
  import { downloadFile } from '/@/utils/common/renderUtils';
  
  const toggleSearchStatus = ref<boolean>(false);
  //Receive main table id
  const mainId = inject('mainId') || '';
  //Prompt pop-up window
  const $message = useMessage()
  const queryParam = {};
  // List page public parameters and methods
  const { prefixCls, tableContext, onImportXls, onExportXls } = useListPage({
    tableProps: {
      api: ${sub.entityName?uncap_first}List,
      columns: ${sub.entityName?uncap_first}Columns,
      canResize: false,
      useSearchForm: false,
      actionColumn: {
        width: 180,
      },
      beforeFetch: (params) => {
        return Object.assign(params, queryParam);
      },
    },
    exportConfig: {
      name: '${sub.ftlDescription}',
      url: ${sub.entityName?uncap_first}ExportXlsUrl,
      params: {
        <#list sub.foreignKeys as key>
        '${key?uncap_first}': mainId
         </#list>
      }
    },
    importConfig: {
      url: ()=>{
        return ${sub.entityName?uncap_first}ImportUrl + '/' + unref(mainId)
      }
    }
  });

  //Register table data
  const [registerTable, { reload<#if sub.foreignRelationType =='1'>,getDataSource</#if>}, { rowSelection, selectedRowKeys }] = tableContext;
  const registerModal = ref();
  const formRef = ref();
  const labelCol = reactive({
    xs:24,
    sm:4,
    xl:6,
    xxl:4
  });
  const wrapperCol = reactive({
    xs: 24,
    sm: 20,
  });
  
  /**
   * New event
   */
  function handleAdd() {
    if (isEmpty(unref(mainId))) {
        $message.createMessage.warning('Please select a main table information')
        return;
    }
    <#if sub.foreignRelationType =='1'>
    let dataSource = getDataSource();
    if(dataSource.length >= 1){
      $message.createMessage.warning('Only one piece of data can be added to a pair of sub-tables')
      return;
    }
    </#if>
    registerModal.value.disableSubmit = false;
    registerModal.value.add();
  }

  /**
   * Edit event
   */
  async function handleEdit(record: Recordable) {
    registerModal.value.disableSubmit = false;
    registerModal.value.edit();
  }

  /**
   * Details event
   */
  function handleDetail(record: Recordable) {
    registerModal.value.disableSubmit = true;
    registerModal.value.edit(record);
  }
  
  /**
   * Delete event
   */
  async function handleDelete(record) {
    await ${sub.entityName?uncap_first}Delete({id: record.id}, handleSuccess);
  }

  /**
   * Batch delete events
   */
  async function batchHandleDelete() {
    await ${sub.entityName?uncap_first}DeleteBatch({ids: selectedRowKeys.value}, handleSuccess);
  }

  /**
   * Successful callback
   */
  function handleSuccess() {
    (selectedRowKeys.value = []) && reload();
  }

  /**
   * Action bar
   */
  function getTableAction(record) {
    return [
      {
        label: 'Edit',
        onClick: handleEdit.bind(null, record),
      },
    ]
  }
  
  /**
   * Drop-down action bar
   */
  function getDropDownAction(record){
    return [
      {
        label: 'Detail',
        onClick: handleDetail.bind(null, record),
      },
      {
        label: 'Delete',
        popConfirm: {
          title: 'Confirm to delete',
          confirm: handleDelete.bind(null, record),
        },
      },
    ];
  }
  
  /**
   * Reset
   */
  function searchReset() {
    formRef.value.resetFields();
    selectedRowKeys.value = [];
    //Refresh data
    reload();
  }
  
  watch(mainId, () => {
    <#list sub.foreignKeys as key>
    queryParam['${key?uncap_first}'] = unref(mainId);
    </#list>
    reload();
  });
</script>
<style lang="less" scoped>
  .jeecg-basic-table-form-container {
    padding: 0;
    .table-page-search-submitButtons {
      display: block;
      margin-bottom: 24px;
      white-space: nowrap;
    }
    .query-group-cust{
      width: calc(50% - 15px);
      min-width: 100px !important;
    }
    .query-group-split-cust{
      width: 30px;
      display: inline-block;
      text-align: center
    }
  }
</style>
</#list>