<template>
  <div>
    <!--Reference table-->
   <BasicTable @register="registerTable" :rowSelection="rowSelection">
     <!--Slot: table title-->
          <template #tableTitle>
             <a-button type="primary" @click="handleAdd" preIcon="ant-design:plus-outlined"> New</a-button>
             <a-button  type="primary" preIcon="ant-design:export-outlined" @click="onExportXls"> Export</a-button>
             <j-upload-button  type="primary" preIcon="ant-design:import-outlined" @click="onImportXls">Import</j-upload-button>
             <a-dropdown v-if="selectedRowKeys.length > 0">
                 <template #overlay>
                    <a-menu>
                      <a-menu-item key="1" @click="batchHandleDelete">
                        <Icon icon="ant-design:delete-outlined"></Icon>
                        Remove
                      </a-menu-item>
                    </a-menu>
                  </template>
                  <a-button>Batch Operations
                    <Icon icon="mdi:chevron-down"></Icon>
                  </a-button>
            </a-dropdown>
          </template>
       <!--Action bar-->
      <template #action="{ record }">
        <TableAction :actions="getTableAction(record)" :dropDownActions="getDropDownAction(record)"/>
      </template>
    </BasicTable>

    <!-- Form Area -->
    <${entityName}Modal @register="registerModal" @success="handleSuccess"></${entityName}Modal>
  </div>
</template>

<script lang="ts" name="${entityPackage}-${entityName?uncap_first}" setup>
  import {ref, computed, unref} from 'vue';
  import {BasicTable, useTable, TableAction} from '/@/components/Table';
  import {useModal} from '/@/components/Modal';
  import { useListPage } from '/@/hooks/system/useListPage'
  import ${entityName}Modal from './modules/${entityName}Modal.vue'
  import {columns, searchFormSchema} from './${entityName}.data';
  import {list, deleteOne, batchDelete, getImportUrl,getExportUrl} from './${entityName}.api';

  //Register model
  const [registerModal, {openModal}] = useModal();
  //Register table data
  const { prefixCls,tableContext,onExportXls,onImportXls } = useListPage({
       tableProps:{
            title: '${tableVo.ftlDescription}',
            api: list,
            columns,
            canResize:false,
            formConfig: {
               labelWidth: 120,
               schemas: searchFormSchema,
               autoSubmitOnEnter:true,
               showAdvancedButton:true,
             },
            actionColumn: {
                width: 120,
             },
        },
        exportConfig: {
             name:"${tableVo.ftlDescription}",
             url: getExportUrl,
           },
           importConfig: {
             url: getImportUrl
           },
   })

   const [registerTable, {reload},{ rowSelection, selectedRowKeys }] = tableContext

   /**
    * Add event
    */
   function handleAdd() {
     openModal(true, {
       isUpdate: false,
       showFooter: true,
     });
   }
   /**
    * Edit event
    */
  function handleEdit(record: Recordable) {
     openModal(true, {
       record,
       isUpdate: true,
       showFooter: true,
     });
   }
   /**
    * Details
   */
  function handleDetail(record: Recordable) {
     openModal(true, {
       record,
       isUpdate: true,
       showFooter: false,
     });
   }
   /**
    * Delete Event
    */
   async function handleDelete(record) {
     await deleteOne({id: record.id}, reload);
   }
   /**
    * Delete events in batches
    */
   async function batchHandleDelete() {
     await batchDelete({ids: selectedRowKeys.value}, reload);
   }
   /**
    * Successful Callback
    */
   function handleSuccess({isUpdate, values}) {
      reload();
   }
   /**
      * Action bar
      */
   function getTableAction(record){
       return [
         {
           label: 'Edit',
           onClick: handleEdit.bind(null, record),
         }
       ]
     }
     /**
       * Drop down action bar
       */
    function getDropDownAction(record){
      return [
           {
             label: 'Detail',
             onClick: handleDetail.bind(null, record),
           }, {
             label: 'Delete',
             popConfirm: {
               title: 'Are you sure to delete?',
               confirm: handleDelete.bind(null, record),
             }
           }
      ]
    }
</script>
<style scoped>

</style>